{"version":3,"sources":["customHooks/useGiphyFetch.js","customHooks/useGiphSearch.js","components/giphTile/giphTile.js","components/giphDetail/giphDetail.js","components/imageGrid/imageGrid.js","pages/trending/trending.js","pages/search/search.js","pages/favorites/favorites.js","routes.js","pages/mainPage.js","App.js","serviceWorker.js","index.js"],"names":["useGiphyFetch","url","method","defaultResult","useState","giphyBaseUrl","gihpyApiKey","isLoading","setIsLoading","result","setResult","error","setError","body","a","query","requestInit","URLSearchParams","toString","JSON","stringify","fetch","response","status","json","useGiphSearch","limit","fetchLimit","offset","setOffset","downloadedGifs","setDownloadedGifs","data","gifsPart","isLoadingGifsPart","gifsPartError","fetchGifsPart","newGifs","isLoadingNewGifs","newGifsError","fetchNewGifs","useEffect","GiphTile","giphImage","giph","tileClicked","title","showToast","setShowToast","mouseOverTile","setMouseOverTile","useLocalStorage","favorites","Card","key","id","onMouseLeave","onMouseOverCapture","CardHeader","Toast","isOpen","ToastBody","CardBody","style","position","className","onClick","width","height","src","Button","e","text","images","original","copy","debug","setTimeout","giphIndex","findIndex","f","splice","writeStorage","handleFavorite","CardFooter","GiphDetail","Row","Col","md","username","target","href","source","import_datetime","trending_datetime","ImageGrid","giphs","isLoadingGifs","giphDetailsVisible","setGiphDetailsVisible","selectedGiph","setSelectedGiph","length","columnsCountBreakPoints","350","550","750","950","1150","1350","gutter","map","find","showGiph","fixed_width_downsampled","type","color","Modal","toggle","size","ModalBody","TrendingComponent","rating","onBottomScroll","useBottomScrollListener","SearchComponent","q","searchQuery","setSearchQuery","fetchGifs","doSearch","debounce","InputGroup","InputGroupAddon","addonType","Input","defaultValue","onKeyUp","value","FavoritesComponent","Routing","path","exact","MainPage","Navbar","NavbarBrand","Nav","NavItem","NavLink","to","App","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.68d0f31b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport function useGiphyFetch(url, method, defaultResult) {\n    const [giphyBaseUrl] = useState(\"https://api.giphy.com/v1\");\n    const [gihpyApiKey] = useState(\"JhchPz8vYFWE8wE3r3RHCcnVa2EGusXe\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [result, setResult] = useState(defaultResult);\n    const [error, setError] = useState(null);\n\n    async function fetchData(body) {\n        setIsLoading(true);\n        let query = \"\";\n        let requestInit = {\n            method            \n        }\n        if(method === 'get'){\n            query = new URLSearchParams(body).toString();\n        }else{\n            requestInit = {...requestInit, body: JSON.stringify(body)};\n        }\n\n        try {\n            let response = await fetch(`${giphyBaseUrl}/${url}?api_key=${gihpyApiKey}&${query}`, requestInit);\n            if (response.status === 200) {\n                setResult(await response.json());\n            } else {\n                setError(await response.json());\n            }\n        } catch (error) {\n            setError(error);\n        } finally {\n            setIsLoading(false);\n        }\n    }\n    return [result, isLoading, error, fetchData];\n}\n","import {useState, useEffect} from 'react';\nimport {useGiphyFetch} from './useGiphyFetch';\n\nexport function useGiphSearch(url, body){\n    const [fetchLimit, setFetchLimit] = useState(body.limit);\n    const [offset, setOffset] = useState(0);\n    const [downloadedGifs, setDownloadedGifs] = useState([]);\n    const [gifsPart, isLoadingGifsPart, gifsPartError, fetchGifsPart] = useGiphyFetch(url, \"get\", {data: []});\n    const [newGifs, isLoadingNewGifs, newGifsError, fetchNewGifs] = useGiphyFetch(url, \"get\", {data: []});\n    \n    function onBottomScrollEnd(){\n        fetchGifsPart({...body, offset: offset});\n        setOffset(offset + fetchLimit);\n    };\n\n    function fetchNew(body){\n        fetchNewGifs(body);\n    }\n\n    useEffect(() => {\n        setDownloadedGifs(newGifs.data);\n    }, [newGifs])\n    \n    useEffect(() => {\n        fetchGifsPart({...body, offset: offset});\n        setOffset(fetchLimit);\n    }, [fetchLimit])\n\n    useEffect(() => {\n        let newGifs = gifsPart.data;\n        setDownloadedGifs([...downloadedGifs, ...newGifs])\n    }, [gifsPart])\n\n    return [\n        downloadedGifs,\n        isLoadingGifsPart || isLoadingNewGifs,\n        gifsPartError || newGifsError,\n        onBottomScrollEnd,\n        fetchNew\n    ];\n}","import React, { useState } from 'react';\nimport { Card, CardBody, CardFooter, Button, Toast, ToastBody, CardHeader } from 'reactstrap';\nimport copy from 'copy-to-clipboard';\nimport { FaLink } from 'react-icons/fa'\nimport { CgDetailsMore } from 'react-icons/cg';\nimport { AiFillStar, AiOutlineStar } from 'react-icons/ai'\nimport { useLocalStorage, writeStorage } from '@rehooks/local-storage';\n\nexport function GiphTile({ giphImage, giph, tileClicked, title }) {\n    const [showToast, setShowToast] = useState(false);\n    const [mouseOverTile, setMouseOverTile] = useState(false);\n    const [favorites] = useLocalStorage(\"favorite_giphs\", []);\n    const copyToClipboard = (text) => {\n        copy(text, { debug: true });\n        setShowToast(true);\n        setTimeout(() => { setShowToast(false); }, 3000)\n    }\n\n    const handleFavorite = (giph) => {\n        let giphIndex = favorites.findIndex(f => f.id === giph.id);\n        if(giphIndex !== -1){\n            favorites.splice(giphIndex, 1)\n            writeStorage('favorite_giphs', [...favorites]);\n        }else{\n            writeStorage('favorite_giphs', [...favorites, giph]);\n        }\n    }\n\n    return (\n        <>\n            <Card key={giph.id} onMouseLeave={() => {\n                setMouseOverTile(false);\n            }} onMouseOverCapture={() => {\n                setMouseOverTile(true);\n            }}>\n                {showToast && <CardHeader>\n                    <Toast isOpen={showToast}>\n                        <ToastBody>\n                            Link copied to clipboard.\n                </ToastBody>\n                    </Toast>\n                </CardHeader>}\n                <CardBody>\n                    <div style={{ position: \"relative\" }} className=\"centered\">\n                        <img onClick={() => { tileClicked(giph.id) }}\n                            width={giphImage.width}\n                            height={giphImage.height} src={giphImage.url}>\n                        </img>\n                        {mouseOverTile &&\n                            <div className=\"centered-element\">\n                                <Button className=\"tile-button\"onClick={(e) => copyToClipboard(giph.images.original.url)} ><FaLink></FaLink></Button>\n                                <Button className=\"tile-button\"onClick={() => { tileClicked(giph.id) }} ><CgDetailsMore></CgDetailsMore></Button>\n                                <Button className=\"tile-button\"onClick={() => { handleFavorite(giph) }} >\n                                    {favorites.findIndex(f => f.id === giph.id) !== -1 ? <AiFillStar></AiFillStar> : <AiOutlineStar></AiOutlineStar>}\n                                </Button>\n                            </div>\n                        }\n                    </div>\n                </CardBody>\n                {title && <CardFooter>\n                    {title}\n                </CardFooter>}\n            </Card>\n\n        </>)\n}","import React from 'react';\nimport { Row, Col, Card, CardBody } from 'reactstrap';\nimport { GiphTile } from '../giphTile/giphTile';\n\nexport function GiphDetail({ giph }) {\n    return (\n        <>\n            <div className=\"centered\">\n                <GiphTile giph={giph} title={giph.title} tileClicked={() => { }} giphImage={giph.images.original}></GiphTile>\n            </div>\n            <br></br>\n            <Card>\n                <CardBody>\n                    <Row>\n\n                        <Col md=\"2\">\n                            Posted by:\n                    </Col>\n                        <Col md=\"4\">\n                            <b>{giph.username}</b>\n                        </Col>\n                        <Col md=\"2\">\n                            Source:\n                    </Col>\n                        <Col md=\"4\">\n                            <a target=\"_blank\" href={giph.source ? giph.source : 'no source'}>{giph.source}</a>\n                        </Col>\n                    </Row>\n                    <Row>\n\n                        <Col md=\"2\">\n                            Imported:\n                    </Col>\n                        <Col md=\"4\">\n                            <b>{giph.import_datetime}</b>\n                        </Col>\n                        <Col md=\"2\">\n                            Trending:\n                    </Col>\n                        <Col md=\"4\">\n                            <b>{giph.trending_datetime}</b>\n                        </Col>\n                    </Row>\n                </CardBody>\n            </Card>\n        </>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\nimport ReactLoading from 'react-loading';\nimport { GiphTile } from '../../components/giphTile/giphTile';\nimport {Modal, ModalBody, ModalHeader} from 'reactstrap';\nimport { GiphDetail } from '../giphDetail/giphDetail';\n\nexport function ImageGrid({ giphs, isLoadingGifs }) {\n    \n    const [giphDetailsVisible, setGiphDetailsVisible] = useState(false);\n    const [selectedGiph, setSelectedGiph] = useState({})\n    const showGiph = (id) => {        \n        setSelectedGiph(giphs.find(a => a.id === id));\n        setGiphDetailsVisible(true);\n    }\n\n    return (\n        <>\n            {!giphs.length && !isLoadingGifs &&\n                <div className=\"centered\">  \n                    <h1>Upss... can't find any giphs.</h1>\n                </div>}\n            <ResponsiveMasonry columnsCountBreakPoints={{ 350: 1, 550: 2, 750: 3, 950: 4, 1150: 5, 1350: 6 }}>\n                <Masonry gutter={4}>\n                    {giphs.map(giph =>\n                        <GiphTile giph={giph} key={giph.id} tileClicked={(id) => {showGiph(id)}} giphImage={giph.images.fixed_width_downsampled}></GiphTile>\n                    )}\n                </Masonry>\n            </ResponsiveMasonry>\n            {isLoadingGifs &&\n                <div className='centered'>\n                    <ReactLoading type=\"cubes\" width='200px' color=\"blue\"></ReactLoading>\n                </div>}\n            <Modal toggle={() => {setGiphDetailsVisible(!giphDetailsVisible)}} size=\"lg\" isOpen={giphDetailsVisible}>\n                <ModalBody>\n                    <GiphDetail giph={selectedGiph}></GiphDetail>\n                </ModalBody>\n            </Modal>\n        </>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\nimport { useGiphSearch } from '../../customHooks/useGiphSearch';\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\nimport ReactLoading from 'react-loading';\nimport { GiphTile } from '../../components/giphTile/giphTile';\nimport { ImageGrid } from '../../components/imageGrid/imageGrid';\n\nexport function TrendingComponent({ }) {\n\n    const [downloadedGifs, isLoadingGifs, error, onBottomScroll] = useGiphSearch(\"gifs/trending\", { limit: 30, rating: \"g\" });\n\n    useBottomScrollListener(() => {\n        onBottomScroll();\n    });\n\n    return (<>\n        <h5>Trending</h5>\n        <ImageGrid giphs={downloadedGifs} isLoadingGifs={isLoadingGifs}></ImageGrid>\n    </>);\n}","import React, { useEffect, useState } from 'react';\nimport { Input, InputGroup, InputGroupAddon, Button } from 'reactstrap';\nimport { useGiphSearch } from '../../customHooks/useGiphSearch';\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\nimport { ImageGrid } from '../../components/imageGrid/imageGrid';\nimport { FaSearch } from 'react-icons/fa'\nimport { debounce } from 'lodash';\n\nexport function SearchComponent({ }) {\n    const [searchQuery, setSearchQuery] = useState({ limit: 30, rating: \"g\", q: \"awesome\" });    \n    const [downloadedGifs, isLoadingGifs, error, onBottomScroll, fetchGifs] = useGiphSearch(\"gifs/search\", searchQuery);\n\n    useBottomScrollListener(() => {\n        onBottomScroll();\n    });\n\n    useEffect(() => {\n        fetchGifs(searchQuery)\n    }, [searchQuery])\n\n    const doSearch = debounce((text) => {\n        setSearchQuery({...searchQuery, q: text});\n    }, 300);\n\n    \n\n    return (<>\n        <h5>Search</h5>\n        <InputGroup size=\"lg\">\n            <InputGroupAddon addonType=\"prepend\"><Button><FaSearch></FaSearch></Button></InputGroupAddon>\n            <Input defaultValue={searchQuery.q} onKeyUp={(e) => {doSearch(e.target.value)}}></Input>\n        </InputGroup>        \n        <ImageGrid giphs={downloadedGifs} isLoadingGifs={isLoadingGifs}></ImageGrid>\n    </>);\n}","import React, { useEffect, useState } from 'react';\nimport { ImageGrid } from '../../components/imageGrid/imageGrid';\nimport { useLocalStorage } from '@rehooks/local-storage';\n\nexport function FavoritesComponent({ }) {\n    const [favorites] = useLocalStorage(\"favorite_giphs\", []);\n    \n    return (<>\n        <h5>Your favorite giphs</h5>\n        <ImageGrid giphs={favorites}></ImageGrid>\n    </>);\n}","import React from 'react';\nimport { Switch, Route, Router } from 'react-router-dom';\nimport { TrendingComponent } from './pages/trending/trending';\nimport { SearchComponent } from './pages/search/search';\nimport { FavoritesComponent } from './pages/favorites/favorites';\n\nexport function Routing() {\n    return (\n        <>\n            <Switch>\n                <Route path=\"/\" exact>\n                    <TrendingComponent></TrendingComponent>\n                </Route>\n                <Route path=\"/trending\" exact>\n                    <TrendingComponent></TrendingComponent>\n                </Route>\n                <Route path=\"/search\" exact>\n                    <SearchComponent></SearchComponent>\n                </Route>\n                <Route path=\"/favorites\" exact>\n                    <FavoritesComponent></FavoritesComponent>\n                </Route>\n            </Switch>\n        </>\n    )\n}","import React from 'react';\nimport { Navbar, Nav, NavItem, NavLink, NavbarBrand } from 'reactstrap';\nimport { Routing } from '../routes';\nimport { BrowserRouter, Link } from 'react-router-dom';\nimport { FiTrendingUp, FiStar } from 'react-icons/fi';\nimport { FaSearch } from 'react-icons/fa'\nexport function MainPage() {\n    return (\n        <>\n            <BrowserRouter>\n                <Navbar>\n                    <NavbarBrand href=\"/\">giphy_search!</NavbarBrand>\n                    <Nav className=\"mr-auto\">\n                        <NavItem>\n                            <NavLink><Link to=\"/trending/\"><FiTrendingUp></FiTrendingUp> Trending</Link></NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink><Link to=\"/search/\"><FaSearch></FaSearch> Search</Link></NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink><Link to=\"/favorites/\"><FiStar></FiStar> Favorites</Link></NavLink>\n                        </NavItem>\n                    </Nav>\n                </Navbar>\n                <Routing></Routing>\n            </BrowserRouter>\n        </>\n    )\n}","import React from 'react';\nimport { Container, Row, Col } from 'reactstrap'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { MainPage } from './pages/mainPage';\n\nfunction App() {\n  return (\n    <Container fluid={true}>\n      <Row>\n        <Col md=\"2\"></Col>\n        <Col md=\"8\">\n          <MainPage></MainPage>\n        </Col>\n        <Col md=\"2\"></Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}